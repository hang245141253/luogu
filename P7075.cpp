#include <bits/stdc++.h>  // 包含所有C++标准库，方便简化代码引入
using namespace std;

const int dom[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};  
// 每个月的天数数组，2月特殊处理闰年，0是占位

int y = -4737, m = 1, d = 1;  // 初始化年份为-4737（公元前），月份和日期都为1

// 判断是否为闰年
int isRUN(int y) {
    if (y <= 0) {  // 处理公元前的年份
        y = -y;  // 转为正数
        return y % 4 == 1;  // 儒略历下公元前每4年一闰，闰年条件
    }
    if (y <= 1582) return y % 4 == 0;  // 1582年前儒略历，每4年一闰
    // 1582年之后使用公历闰年规则：400年一闰，100年不闰，4年一闰
    return (y % 400 == 0) || ((y % 4 == 0) && (y % 100 != 0));
}

// 计算下一个日期
void getnxtday() {
    d++;  // 日期加1
    if (y == 1582 && m == 10 && d == 5) d = 15;  // 处理1582年10月历法调整
    // 如果当前日期超出当月的天数，月份加1，日期重置为1
    if (d > dom[m] + (m == 2 && isRUN(y))) m++, d = 1;
    // 如果月份超出12，年份加1，月份重置为1
    if (m > 12) y++, m = 1;
}

// 计算从公元 前4712年1月1日 到 x年 对应的总天数
long long checkday(long long x) {
    long long day = (x + 4712) * 365;  // 每年按365天计算
    if (x > 1582) day -= 10;  // 1582年历法调整，去掉10天
    day += (x + 4712 + 3) / 4;  // 先把4的倍数都当闰年处理了，肯定会有多的。
    if (x >= 1600) { // 1582以后才有百年不润 400年又闰， 最近的年份就是1600年
        x -= 1601;   // >= 1600 所以从1601年开始算，去掉以后算需要修正的day
        day -= x / 100;  // 先去掉百年不闰的
        day += x / 400;  // 补回400年又闰的
    }
    return day;  // 返回从公元前4712年到x年的总天数
}

int main() {
    int T;
    scanf("%d", &T);  // 读取测试用例数量
    while (T--) {
        y = 0; m = d = 1;  // 初始化为公元0年1月1日
        long long n;
        scanf("%lld", &n);  // 读取输入的儒略日数
        
        // 儒略日:公元前4713年1月1日某一时刻间所经过的天数
        int l = -4712, r = 1e9 + 1;  // 二分查找的初始年份范围
        while (l <= r) {
            int mid = (l + r) / 2;  // 中点年份
            if (checkday(mid) <= n) {  // 判断中点年份对应的天数是否小于等于n
                y = mid;  // 更新年份为mid
                l = mid + 1;  // 向右半区搜索
            } else {
                r = mid - 1;  // 向左半区搜索
            }
        }
        
        n -= checkday(y);  // 减去y年对应的天数，得到剩余天数
        if (y <= 0) y--;  // 处理公元前的年份
        
        while (n--) getnxtday();  // 逐天推进，直到找到对应日期
        
        printf("%d %d ", d, m);  // 输出日和月
        if (y <= 0) printf("%d BC\n", -y);  // 输出公元前的年份
        else        printf("%d\n", y);  // 输出公元后的年份
    }
    return 0;
}
